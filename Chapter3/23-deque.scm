(define (make-dequeue)
    (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty?) (null? (front-ptr)))
    (define (front)
        (if (empty?)
            (error "FRONT called with an empty dequeue")
            (car front-ptr)))
    (define (rear)
        (if (empty?)
            (error "REAR called with an empty dequeue")
            (car rear-ptr)))

    (define (rear-insert! item)
        (let  ((new-pair (new item '())))
            (cond ((empty?)
                (set-front-ptr! new-pair)
                (set-rear-ptr! new-pair))
            (else
                (set-cdr! rear-ptr new-pair)
                (set-rear-ptr! new-pair)))))

    (define (front-insert! item)
        (let  ((new-pair (new item '())))
            (cond ((empty?)
                (set-front-ptr! new-pair)
                (set-rear-ptr! new-pair))
            (else
                (set-cdr! new-pair front-ptr)
                (set-front-ptr! new-pair)))))

    (define (front-delte!)
        (cond ((empty?)
            (error "FRONT-DELETE! called with an empty dequeue"))
        (else (set-front-ptr! (cdr front-ptr)))))

    (define (rear-delte!)
        (cond ((empty?)
            (error "REAR-DELETE! called with an empty dequeue"))
        (else (set-REAR-ptr! (cdr front-ptr)))))